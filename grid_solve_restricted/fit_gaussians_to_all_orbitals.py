import numpy as np
import matplotlib.pyplot as plt
import numpy as np
from scipy.optimize import minimize
import numba
from numba import prange,jit
import sys
from numpy import sqrt, exp, pi
from numpy import array
import time
@jit(nopython=True, fastmath=True,cache=True)
def gauss(x,a,b,p,q,c):
    asq=a**2
    bredde = asq + 1j*b
    qminx = q - x
    jp=1j*p
    br_qminx=bredde*qminx
    gaussval =sqrt(abs(a)/sqrt(pi/2))* exp(-qminx * (jp + br_qminx))
    return c*gaussval
@jit(nopython=True, fastmath=True,cache=True)
def mmake_orbitals_from_gauss(nonlin,lin,grid):
    ngauss=nonlin.shape[0]
    norbs=lin.shape[1]
    orbitals=np.zeros((len(grid),norbs),dtype=np.complex128)
    for i in range(norbs):
        for j in range(ngauss):
            a,b,p,q=nonlin[j]
            c=lin[j,i]
            orbitals[:,i]+=gauss(grid,a,b,p,q,c)
    return orbitals
@jit(nopython=True, fastmath=True,cache=True)
def gauss_and_derivs(x,a,b,p,q):
    asq=a**2
    xsq=x**2
    bredde = asq + 1j*b
    qminx = q - x
    jp=1j*p
    br_qminx=bredde*qminx
    gaussval =sqrt(abs(a)/sqrt(pi/2))* exp(-qminx * (jp + br_qminx))
    
    aderiv=(-2*a*q**2 + 4*a*q*x - 2*a*xsq + 1/(2*a))*gaussval
    bderiv=1j*(-q**2 + 2.0*q*x - xsq)*gaussval
    pderiv=1j*(-q + x)*gaussval
    qderiv=(-2.0*asq*q + 2.0*asq*x - 2j*b*q + 2j*b*x - jp)*gaussval
    return (gaussval,aderiv, bderiv, pderiv, qderiv)
@jit(nopython=True, fastmath=True,cache=True)
def setupfunctionsandDerivs(gaussian_nonlincoeffs,points):
    if gaussian_nonlincoeffs.ndim==1:
        num_gauss=1
    else:
        num_gauss = len(gaussian_nonlincoeffs)
    functions = np.empty((num_gauss, len(points)), dtype=np.complex128)
    aderiv_funcs = np.empty((num_gauss, len(points)), dtype=np.complex128)
    bderiv_funcs = np.empty((num_gauss, len(points)), dtype=np.complex128)
    pderiv_funcs = np.empty((num_gauss, len(points)), dtype=np.complex128)
    qderiv_funcs = np.empty((num_gauss, len(points)), dtype=np.complex128)
    if gaussian_nonlincoeffs.ndim==1:
        avals=[gaussian_nonlincoeffs[0]]
        bvals=[gaussian_nonlincoeffs[1]]
        pvals=[gaussian_nonlincoeffs[2]]
        qvals=[gaussian_nonlincoeffs[3]]
    else:
        avals=gaussian_nonlincoeffs[:,0]
        bvals=gaussian_nonlincoeffs[:,1]
        pvals=gaussian_nonlincoeffs[:,2]
        qvals=gaussian_nonlincoeffs[:,3]
    for i in range(num_gauss):
        funcvals, da,db,dp,dq= gauss_and_derivs(points, avals[i], bvals[i], pvals[i], qvals[i])
        functions[i] = funcvals
        aderiv_funcs[i]=da
        bderiv_funcs[i]=db
        pderiv_funcs[i]=dp
        qderiv_funcs[i]=dq
    return (functions, aderiv_funcs, bderiv_funcs, pderiv_funcs, qderiv_funcs)
molecule=sys.argv[1]
filename="/home/simonsch/projects/TDHF/grid-methods/examples/Orbitals_%s.npz"%molecule
orbital_file=np.load(filename)
orbitals=orbital_file['psi0']
norbs=orbitals.shape[1]
grid=points=orbital_file['x']
dx=grid[1]-grid[0]
orbitals=orbitals/np.sqrt(dx)
@jit(nopython=True, fastmath=True,cache=True)
def error_function(nonlin_params):
    nbasis=len(nonlin_params)//4
    functions,aderiv_funcs, bderiv_funcs, pderiv_funcs, qderiv_funcs=setupfunctionsandDerivs(nonlin_params.reshape((-1,4)),points)
    function_derivs=np.zeros((4*nbasis,len(points)),dtype=np.complex128)
    for i in range(nbasis):
        function_derivs[4*i]=aderiv_funcs[i]
        function_derivs[4*i+1]=bderiv_funcs[i]
        function_derivs[4*i+2]=pderiv_funcs[i]
        function_derivs[4*i+3]=qderiv_funcs[i]
    X=functions.T
    old_action=np.ascontiguousarray(orbitals.T)
    Xderc=np.zeros_like(X)
    X_dag=X.conj().T
    XTX =X_dag @ X
    I=np.eye(XTX.shape[0])
    rothe_error=0
    zs=np.zeros_like(old_action)
    invmats=[]
    #
    new_lincoeff_T=np.empty((norbs,nbasis),dtype=np.complex128)
    for orbital_index in range(old_action.shape[0]):
        Y=old_action[orbital_index]
        XTy = X_dag @ Y
        invmats.append(np.linalg.inv(XTX+ lambd * I)) #? the "small c" is already included previously
        new_lincoeff_T[orbital_index]=invmats[-1]@XTy
        zs[orbital_index]=Y-X@new_lincoeff_T[orbital_index]
        rothe_error+=np.linalg.norm(zs[orbital_index])**2
    Xders=function_derivs.T
    gradient=np.zeros_like(nonlin_params)
    for i in prange(len(nonlin_params)):
        Xder=Xderc.copy()
        Xder[:,i//4]=Xders[:,i]
        Xder_dag=Xder.conj().T
        for orbital_index in range(old_action.shape[0]):
            Y=old_action[orbital_index]
            invmat=invmats[orbital_index]
            matrix_der=-invmat@(X_dag@Xder+Xder_dag@X)@invmat
            cder=matrix_der@X_dag @ Y+invmat@Xder_dag @ Y
            gradvec=(-Xder@new_lincoeff_T[orbital_index]-X@cder)
            gradient[i]+=2*np.real(zs[orbital_index].conj().T@gradvec)
    return rothe_error,gradient, new_lincoeff_T.T
def error_wrapper(nonlin_params):
    return error_function(nonlin_params)[:2]
#nonlin_params=np.random.rand(8)
if molecule=="LiH":
    params0=[0.7715728759381167, -2.378103974835745e-08, -2.0912298074437485e-08, -1.1444173300901517, 0.7813390127101867, -5.0938706624620435e-09]
    params1=[0.7042871573613874, -5.065117040840954e-08, -1.9780465499725062e-08, 1.0771887087192669, 0.6655113330409473, -1.896338944657654e-08]
    nonlin_params=np.concatenate((params0[:4],params1[:4]))
    nonlin_params_6=[np.float64(0.6090776682595093), np.float64(0.05591160355346448), np.float64(-0.03999642941102439), np.float64(-1.2012332753770598), np.float64(0.46927397466755066), np.float64(-0.01925967660085051), np.float64(-0.2671038348365482), np.float64(-0.23081038982215804), np.float64(1.2136103299005783), np.float64(0.11209585571140461), np.float64(-0.08503106149663832), np.float64(-1.1758322256532485), np.float64(0.3883550086440996), np.float64(-0.2758784217019803), np.float64(1.7494181234209958), np.float64(-2.8028193517079623), np.float64(0.36697885109471284), np.float64(-0.13308331360954737), np.float64(-0.9163762876487395), np.float64(1.8341881933831412), np.float64(1.0650678782645973), np.float64(0.6549152804468847), np.float64(0.6012535001520172), np.float64(0.012533547369904825)]
    nonlin_params_10=[np.float64(0.7830074505417289), np.float64(0.2545239488185325), np.float64(-0.026580064957894296), np.float64(-1.442976863448059), np.float64(0.5191318377586959), np.float64(0.12971598155096198), np.float64(0.07029766448634617), np.float64(-0.5491724520924159), np.float64(1.5744127920427011), np.float64(0.2837656590760793), np.float64(-0.11269969958195826), np.float64(-1.1635482997126236), np.float64(0.5930779511521345), np.float64(-0.32809863722456295), np.float64(1.888894653602761), np.float64(-2.5238086017787795), np.float64(0.47205008362314343), np.float64(-0.09652343372370599), np.float64(-1.0342379594746807), np.float64(0.28660062419735666), np.float64(1.0647126091545531), np.float64(0.5706066730614725), np.float64(0.42694955714069627), np.float64(-0.04936302966353163), np.float64(0.27407855868447106), np.float64(0.01592275230099074), np.float64(0.18610630739116807), np.float64(-0.03828506735978566), np.float64(0.44297773688981135), np.float64(0.2444597412382956), np.float64(-2.6560641818109527), np.float64(-2.4579376759864173), np.float64(0.45018191810535163), np.float64(0.7802332228975613), np.float64(2.7058073406862526), np.float64(1.674370789266169), np.float64(0.5661584301272955), np.float64(-0.4328293421324509), np.float64(1.739501582587766), np.float64(-4.788474810629558)]
    nonlin_params_14=[np.float64(0.9148803643513903), np.float64(0.5602602417143427), np.float64(-0.1872372994229406), np.float64(-1.1793279829714614), np.float64(0.6270336249518588), np.float64(0.11674568357923563), np.float64(-0.013117183666097808), np.float64(-0.983393783107557), np.float64(1.9467446813088367), np.float64(0.7546013143341052), np.float64(-0.375512089742104), np.float64(-1.1465221817604898), np.float64(0.7883338496990617), np.float64(-0.1731335278671014), np.float64(2.4918259767756314), np.float64(-0.5806235500037762), np.float64(0.8866723138927519), np.float64(-0.2285354387767129), np.float64(-0.652651356116482), np.float64(0.4058056988752136), np.float64(1.5393373515058113), np.float64(1.495354800738791), np.float64(0.9539073117961845), np.float64(0.29923602963889484), np.float64(0.41147114745664176), np.float64(0.031161057682789223), np.float64(0.3389236636797263), np.float64(0.18893119742410133), np.float64(0.8356510936292939), np.float64(0.881914562172106), np.float64(-1.5470301366356953), np.float64(-1.8473782908694163), np.float64(0.86131214338972), np.float64(0.7907121724799508), np.float64(2.7240401919002775), np.float64(1.0199356577597534), np.float64(0.5688426757648622), np.float64(-0.4939213283341975), np.float64(3.3889366590468), np.float64(-2.8983625128574384), np.float64(0.2926720861770567), np.float64(0.0038921419438199137), np.float64(0.29030449954092197), np.float64(-0.31820133673399625), np.float64(0.4286685207930138), np.float64(0.09357312182517838), np.float64(0.7625119643285243), np.float64(0.5487538786708623), np.float64(0.2273572091526157), np.float64(0.002881482592161032), np.float64(0.14174569325298456), np.float64(-0.18388583100253492), np.float64(0.4577551998835848), np.float64(0.11928151926217888), np.float64(-0.6770262052287294), np.float64(-1.763355560238901)]
    nonlin_params_18=[np.float64(1.0804575786359065), np.float64(0.5319217502668117), np.float64(-0.23252811661689224), np.float64(-1.3643756727709542), np.float64(0.8515324431526962), np.float64(0.4832151344179922), np.float64(-0.4949518606457716), np.float64(-1.5734366479135553), np.float64(2.332179218048421), np.float64(-0.037778516068949955), np.float64(0.020437755331178364), np.float64(-1.1627693195078543), np.float64(1.4075691813983164), np.float64(-1.5027782823132982), np.float64(0.8957621986615771), np.float64(-0.6681988006152032), np.float64(0.9650804665622549), np.float64(-0.4551003387329287), np.float64(-1.144782515295444), np.float64(-0.10961944484056058), np.float64(1.7888705427623868), np.float64(1.7240993953246895), np.float64(0.9306663349341522), np.float64(0.23947510059869384), np.float64(0.5927024199845146), np.float64(0.23373764093182373), np.float64(0.8876399780719333), np.float64(-0.6141594632491427), np.float64(1.1716501824537566), np.float64(0.9902466607323873), np.float64(-1.136145926384963), np.float64(-2.1507145959473193), np.float64(1.0612667757060825), np.float64(1.0878485090615744), np.float64(2.7460893522986187), np.float64(0.6280817881843942), np.float64(0.6773367636372642), np.float64(-0.4571362346301919), np.float64(2.8544226662464887), np.float64(-2.5338239452307123), np.float64(0.3827456121778593), np.float64(0.040265675372400396), np.float64(0.31155942783854484), np.float64(0.31752316390505597), np.float64(0.7985820963689393), np.float64(0.19331306702273576), np.float64(0.5085590740616975), np.float64(0.6821372272772659), np.float64(0.38939911094971114), np.float64(-0.02505441164192107), np.float64(0.040305617727592544), np.float64(-0.7902000052401722), np.float64(0.6269757843119513), np.float64(0.2421632985850598), np.float64(-0.7725266488584991), np.float64(-1.76739980829619), np.float64(0.4164124173105076), np.float64(-0.1762071801572416), np.float64(1.4159412045117827), np.float64(-3.4113040447966454), np.float64(0.34675319861119447), np.float64(-0.01317088491544785), np.float64(-0.2409496106257316), np.float64(-0.17190818352412374), np.float64(0.2355011306523674), np.float64(-0.02183648919369586), np.float64(-0.5363803782320997), np.float64(0.5166231476670864), np.float64(0.23674964860893422), np.float64(0.019618848262575435), np.float64(-0.5490356700976956), np.float64(-1.319166643685565)]

    
    #nonlin_params_20=[0.9626788370791521, -0.14640482027622465, 0.44511867996123816, -0.829898223248346, 0.39107620488943623, 0.030472130982148897, -0.4783007090363889, -0.28136019959536757, 1.0998468534589734, -0.04020138934426521, -0.6294529164732459, -0.16794652721467535, -1.6240387744148566, 0.40653511052572683, -0.3934968848097701, -0.9786672637598476, 0.3034731824804524, 0.00032914604229482286, -0.29889221902523605, 0.04633796400805767, -0.5151567572409118, -0.07654918190451994, -0.7253254638316045, 0.8999276554406843, 0.4670150410417591, -0.012417519073809875, -0.25480496785865697, 0.3671857233399808, -1.3541914295664708, 0.23317332483569006, -0.430084116927622, -0.2536634304335475, 0.5444063164760102, 0.04045130675806871, 0.04195673215333539, 0.14303579450660608, -0.23143009978196186, 0.0020942211661463413, -0.1482085329290336, -0.1238423101956901, 2.222910868513582, 0.6282752171793496, -0.10890674944709414, -0.004107032506971059, -1.6286825331799575, 0.07650411790393316, -0.24682755118218608, -0.10943999161509894, 3.836121927474091, 0.4855553899877352, -0.1351906259243562, 0.45942412938414745, 3.560891563818367, 0.8565187602574683, -0.06201003100453154, -0.15100901815742496, -1.1307673885118106, 0.5970308916172523, 0.44887813652818415, -0.03351719915560091, -2.8234441849469496, 0.3996484226704252, -0.08197665502520432, 0.0012690864268736538, -0.8453745301603205, 0.2743019437081689, 0.223265216734709, 0.520893970939555, 4.46412889670516, 0.5555373123616358, -0.0009996506853508335, 0.14952133625766137, -0.5365922659143469, 0.3885060098668206, 0.02792224577264666, 0.12231440809319133, -3.433846384437379, 0.15645277844337352, -0.000623845344482075, 0.019938539252113127]
    nonlin_params_20=[np.float64(1.2224111796580923), np.float64(0.2436449355440829), np.float64(-0.16824905335328108), np.float64(-0.9339903120656237), np.float64(0.9374641014886423), np.float64(0.3983808459817276), np.float64(-0.6012696388410799), np.float64(-1.2878385320478805), np.float64(2.47176740177886), np.float64(-0.3054557440541797), np.float64(0.04499484700973091), np.float64(-1.154794682216766), np.float64(1.3646007849597754), np.float64(-1.5234501718362672), np.float64(0.6468989291039214), np.float64(-0.6152954798834616), np.float64(0.9489979741371577), np.float64(-0.5231451588380265), np.float64(-2.422713367172807), np.float64(-0.1093565356143876), np.float64(1.755684368073239), np.float64(2.2033050158960044), np.float64(0.9124512959383151), np.float64(0.2516666983709032), np.float64(0.590270901392434), np.float64(0.160791168084697), np.float64(1.580134742725576), np.float64(-0.23311687769206044), np.float64(1.756630810029374), np.float64(0.2618971017681448), np.float64(-0.49712234699716934), np.float64(-1.997380243158117), np.float64(1.001661730707141), np.float64(1.0941546353140463), np.float64(2.8592906964124336), np.float64(0.7251181059329079), np.float64(0.9115694397065318), np.float64(0.569450000217032), np.float64(4.9613020654019), np.float64(-0.0681822470556947), np.float64(0.4110028450355543), np.float64(0.08191273850804243), np.float64(0.23986305843415615), np.float64(0.7450220327666872), np.float64(0.5936349943243479), np.float64(-0.030883506121629257), np.float64(-0.41101424143150794), np.float64(0.0998722563837754), np.float64(0.483603097352854), np.float64(0.009200526500320294), np.float64(-0.05291092968589865), np.float64(-0.8564372995811934), np.float64(0.7756613632126153), np.float64(0.3642698055879628), np.float64(-0.7039747069310188), np.float64(-1.2390606435016083), np.float64(0.601471285957556), np.float64(-0.18309489125673814), np.float64(1.3348288140440032), np.float64(-2.1181422003800074), np.float64(0.3173289677815566), np.float64(-0.03142315384716798), np.float64(-0.31555970369209585), np.float64(0.7942165293890027), np.float64(0.4117665585273863), np.float64(-0.042862281497000186), np.float64(-0.42922749777168334), np.float64(0.2571482865612601), np.float64(0.33616324769617095), np.float64(0.03802150674008499), np.float64(-0.49252737150162523), np.float64(-0.8082882601783548), np.float64(0.1927637149926679), np.float64(0.0012845290646561814), np.float64(0.3067055689469634), np.float64(-0.028644843218750115), np.float64(0.23055165514970064), np.float64(-0.001460363749161348), np.float64(0.18468335876777411), np.float64(-0.18018252862709142)]

    nonlin_params=np.array(nonlin_params_20)
elif molecule=="LiH2":
    params0=[-0.7712660650736903, -5.952317882470911e-09, -1.4488893274186127e-08, -4.0418882091798904, 0.7806390664917734, -1.1168345169576041e-10]
    params1=[0.7750075188621053, 3.5751711651594493e-09, -3.733173727524503e-09, 1.7626735673015788, -0.7823890551432711, -5.181652991530847e-09]
    params2=[0.6315096492245194, 4.390162486106461e-08, 1.313879649866264e-08, -1.6425268469020506, -0.592276028056866, -2.490477593066186e-08]
    params3=[0.7055618440546447, 1.404240921903318e-08, 2.0889949977580362e-08, 4.058385970816385, 0.6258928231786443, 1.0463034407829632e-08]
    nonlin_params=np.concatenate((params0[:4],params1[:4],params2[:4],params3[:4]))
    nonlin_params_13=[np.float64(-1.068444924020907), np.float64(0.4419349660236449), np.float64(-0.5768497747517463), np.float64(-4.141463525885942), np.float64(1.3006139814240594), np.float64(0.06316910527199142), np.float64(-0.27763182888172827), np.float64(1.6828395446857198), np.float64(0.4292177311301967), np.float64(-0.04375569212410014), np.float64(-0.25931915006537454), np.float64(-2.642551914275647), np.float64(0.6387032477000971), np.float64(-0.1306506085295919), np.float64(-0.501930338556178), np.float64(1.58667978460985), np.float64(0.9073197874648933), np.float64(0.6963825091199074), np.float64(-0.4023589156393435), np.float64(0.6591187230327021), np.float64(0.6047237910489317), np.float64(-0.007004094561294154), np.float64(0.017408795521949707), np.float64(-4.079879490676405), np.float64(1.0948056709235032), np.float64(-0.028347821568378007), np.float64(-0.05827811103460148), np.float64(4.0709603538797285), np.float64(0.3577783273294048), np.float64(-0.1740124961109305), np.float64(2.8250925407772365), np.float64(-3.880782227007368), np.float64(0.3077185890239203), np.float64(-0.03972280790911587), np.float64(-0.44674778271776583), np.float64(2.748997309796284), np.float64(1.1489120506653974), np.float64(-0.035643460513972124), np.float64(0.5210521672939605), np.float64(-0.4386305951193063), np.float64(1.233144446250846), np.float64(0.8440942255940485), np.float64(0.26629738959559635), np.float64(-3.615085985199541), np.float64(0.340531853020305), np.float64(0.1021218322548392), np.float64(0.7415645028367761), np.float64(3.967424756452086), np.float64(0.29802201329131944), np.float64(0.03248446797952502), np.float64(-0.33189233790428646), np.float64(-4.125287534588074)]
    nonlin_params_22=[np.float64(-2.0016006476818764), np.float64(0.5617180894107844), np.float64(-0.5213864862669355), np.float64(-3.924409062044189), np.float64(1.8272962366382297), np.float64(0.11202749647053412), np.float64(-0.5106713842419719), np.float64(1.7669695400938175), np.float64(0.650174761388171), np.float64(-0.27493625655142884), np.float64(-0.5382312161674644), np.float64(-1.5807955459765068), np.float64(1.0012347899888894), np.float64(-0.11011246103815298), np.float64(-0.3262937233893905), np.float64(1.589158975099774), np.float64(1.2250662547211095), np.float64(0.5432989182976319), np.float64(-1.5260267619175452), np.float64(0.7085084318344416), np.float64(0.49852349600404067), np.float64(-0.09300378565129447), np.float64(0.3559524949770861), np.float64(-2.755264271996734), np.float64(1.5367953499741964), np.float64(-0.03464676090502423), np.float64(0.1433238212145566), np.float64(3.96449451687329), np.float64(0.8953794559587995), np.float64(-0.40672329495497705), np.float64(1.3018009352533881), np.float64(-3.699065099489284), np.float64(0.44994610513010713), np.float64(-0.10326648727713547), np.float64(-0.8923564022696995), np.float64(2.0468751861273047), np.float64(1.0261534997499202), np.float64(0.9196671936138326), np.float64(-1.9188456859903922), np.float64(0.297630814444292), np.float64(1.7241291933354759), np.float64(0.8363606919868134), np.float64(0.20443009326406195), np.float64(-3.572767031431326), np.float64(0.41378102138673006), np.float64(0.12021822429070411), np.float64(1.043568941547532), np.float64(1.848320583644346), np.float64(0.5084533312907346), np.float64(0.09415138179781095), np.float64(-0.2230597916677169), np.float64(-3.3586484307526905), np.float64(1.4511734460527574), np.float64(-0.23588515848211009), np.float64(-0.0940911763762262), np.float64(-2.7341520490705262), np.float64(0.8171976506716377), np.float64(0.43843520598824737), np.float64(-0.7654926901599496), np.float64(1.0895848340541372), np.float64(0.8997083420889752), np.float64(0.33729342176027105), np.float64(-0.994628149830634), np.float64(-3.5434295212577647), np.float64(0.239138798613511), np.float64(0.018457980652943733), np.float64(-0.05507503747917032), np.float64(-1.6314235036234614), np.float64(0.24839976223453827), np.float64(-0.018125582440062987), np.float64(-0.2679511529180187), np.float64(2.070688746444957), np.float64(0.8825228800676682), np.float64(-0.5727022619242781), np.float64(-1.5761281742091415), np.float64(2.625204662844317), np.float64(0.2808275667816157), np.float64(-0.022905246139740442), np.float64(0.513264060092317), np.float64(-2.7063624018932875), np.float64(0.25798672416837376), np.float64(-0.03625229997110884), np.float64(-0.5076631918152159), np.float64(2.7336673101721454), np.float64(0.36748469896943997), np.float64(-0.15844341193261655), np.float64(1.8875315313812142), np.float64(-4.851262835412795)]
    nonlin_params_32=[np.float64(-2.190720183955524), np.float64(-0.9429511119603515), np.float64(0.20467382605175552), np.float64(-3.6074839691383174), np.float64(2.362938164367516), np.float64(0.14060016341100187), np.float64(-0.16431602826478459), np.float64(1.7684315035733262), np.float64(1.2662492086655164), np.float64(-0.4234753451218921), np.float64(-1.6632628126405922), np.float64(-2.703007578369759), np.float64(1.4308140226267132), np.float64(0.73269173295141), np.float64(0.43988476295395057), np.float64(2.25225333762294), np.float64(1.105821064688303), np.float64(0.8499785209734241), np.float64(-1.4562203550414996), np.float64(0.6981938820755338), np.float64(0.6938337588467253), np.float64(0.09658344040997183), np.float64(-0.3072180007004298), np.float64(-0.6427574507481841), np.float64(2.0161199889698924), np.float64(-0.8906726729754957), np.float64(-0.15715504685686432), np.float64(4.024661443696083), np.float64(1.6047828471059136), np.float64(-1.3587505215546793), np.float64(-0.44907636509315546), np.float64(-3.0514309645686635), np.float64(0.8027282597834856), np.float64(0.06614296418154453), np.float64(-0.00931844887107404), np.float64(2.073352244160757), np.float64(0.9863474398660533), np.float64(1.945687023246662), np.float64(-2.6114201043877308), np.float64(0.15868605303906652), np.float64(2.023382813433591), np.float64(0.9631863495310261), np.float64(0.6461391972976345), np.float64(-3.3352060340675953), np.float64(0.9984467175329946), np.float64(0.44736060685049955), np.float64(0.45627508360273844), np.float64(2.7478420115417306), np.float64(1.0404071697057566), np.float64(0.35930686545897406), np.float64(-1.4827649098187576), np.float64(-3.2530643859266273), np.float64(1.4180693929895163), np.float64(1.375973359758848), np.float64(1.6103787744050757), np.float64(-2.680215418239836), np.float64(0.7624736491974569), np.float64(0.3575339260021842), np.float64(-0.9503864407373279), np.float64(1.317790394284394), np.float64(1.4411402991959144), np.float64(0.18929967556982272), np.float64(-0.9892094521223486), np.float64(-3.286048729205578), np.float64(0.579868532788045), np.float64(0.13963731923329636), np.float64(-1.4333647007803951), np.float64(-2.9465629090290437), np.float64(0.4475747350590491), np.float64(-0.1736865628636102), np.float64(-1.2300511960757277), np.float64(2.647764102216085), np.float64(1.1646821854620935), np.float64(-1.1619278227666985), np.float64(-0.6716116747749303), np.float64(2.905727788634946), np.float64(0.8047999117515282), np.float64(-0.1443976859640883), np.float64(0.12184558042971527), np.float64(-3.0273941944033314), np.float64(0.38941237913766535), np.float64(-0.03156681617936826), np.float64(-0.4048013895139874), np.float64(1.8801899856068718), np.float64(0.9144062002318774), np.float64(0.22924188038919954), np.float64(-0.2276003324844812), np.float64(-2.0967265988730763), np.float64(0.3480365732520898), np.float64(0.04700039212445256), np.float64(0.5697851438591807), np.float64(2.625614315492169), np.float64(0.8192200329802962), np.float64(0.37348611455298414), np.float64(1.5886403177776574), np.float64(3.4719172150148427), np.float64(0.26323656741900553), np.float64(-0.024751593864590117), np.float64(0.5284432736412805), np.float64(-2.1098379371969074), np.float64(0.37629226974304547), np.float64(0.002016132235291296), np.float64(0.08052002718156673), np.float64(3.673294909388912), np.float64(0.47861107055022034), np.float64(0.16447252590769257), np.float64(-1.380208661487579), np.float64(-3.465475259226007), np.float64(0.5729596637974096), np.float64(0.056474382978051386), np.float64(-0.638689783694776), np.float64(-3.0210099229078056), np.float64(0.25470265360925276), np.float64(0.016464645498006022), np.float64(-0.2210480615147055), np.float64(-1.8971956465827904), np.float64(0.2517214789530776), np.float64(0.02300460869820039), np.float64(0.46470546784453814), np.float64(2.4710066204092267), np.float64(0.1986885270188449), np.float64(0.028207269145469227), np.float64(-0.5880238139308137), np.float64(-3.1935930538552193), np.float64(0.19603750637471276), np.float64(0.02707169784523973), np.float64(0.6652665084202122), np.float64(3.3112410101689513)]

    nonlin_params=np.array(nonlin_params_22).flatten()
lambd=1e-8
for k in range(50):
    nonlin_params_copy=nonlin_params.copy()
    if k%5==0 and True:
        rangerino=20
    else:
        rangerino=0
    if rangerino>0:
        nonlin_params_new=[]
        errs=[]
        for l in prange(rangerino):

            newparams=20*(np.random.rand(4)-0.5)
            newparams[2]=0; newparams[1]=0
            newparams[0]=np.random.rand()
            nonlin_paramsx=np.concatenate((nonlin_params_copy,newparams))
            nonlin_params_new.append(nonlin_paramsx)
            err,initial_grad=error_wrapper(nonlin_paramsx)
            hess0=np.diag(1/np.abs(initial_grad+1e-16))
            res=minimize(error_wrapper,nonlin_paramsx,method='BFGS',jac=True,options={"hess_inv0":hess0,'maxiter':50})
            err,initial_grad=error_wrapper(res.x)
            errs.append(err)
        if rangerino>0:
            best=np.argmin(errs)
            nonlin_params=nonlin_params_new[best]
        
    print("Num gauss: ",len(nonlin_params)//4)
    initial_err,initial_grad=error_wrapper(nonlin_params)
    print("Initial error:",initial_err)
    start=time.time()
    hess0=np.diag(1/np.abs(initial_grad+1e-16))
    res=minimize(error_wrapper,nonlin_params,method='BFGS',jac=True,options={"hess_inv0":hess0,'maxiter':500,"gtol":1e-15})
    if res.nit==0:
        res.nit=1
    end=time.time()
    print("Time:",(end-start)/res.nit)
    nonlin_params=res.x
    
    new_err,new_grad,optimal_lincoeffs=error_function(nonlin_params)
    print("Final error:",new_err)
    print(list(nonlin_params))
new_lin=optimal_lincoeffs

gauss_orbitals=mmake_orbitals_from_gauss((nonlin_params).reshape((-1,4)),new_lin,grid)
for i in range(gauss_orbitals.shape[1]):
    plt.plot(grid,np.real(gauss_orbitals[:,i]),label="Gauss %d"%i)
    plt.plot(grid,np.real(orbitals[:,i]),label="Grid %d"%i)
plt.legend()
plt.show()